@page "/game"
@rendermode InteractiveWebAssembly

@using System.Timers

<PageTitle>Animal Matching Game</PageTitle>

<h3>Matches found : @matchesFound</h3>
<h3>Time @timeToDisplay</h3>
<div class="container">
    <div class="row">
       @*  @foreach (var animal in shuffledAnimals)
        {
            <div class="col-3">
                <button type="button"
                        class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        } *@

     
                @for (var animalNumber = 0;
                                animalNumber < shuffledAnimals.Count;
                                animalNumber++)
                {
                    var animal = shuffledAnimals[animalNumber];
                    var uniqueDescription =
                    $"Button #{animalNumber}";
                    <div class="col-3">
                        <button type="button"  
                                        @onclick="@(() => 
                                        ButtonClick(animal, uniqueDescription))"
                                    class="btn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>
                                }
          

    </div>
</div>

<style>

     .container {
        width: 400px;
    }
    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

@code {
    List<string> animalEmoji = new()
    {
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
    };

    List<string> shuffledAnimals = new();
    int matchesFound = 0;

    private void SetUpGame()
    {
        shuffledAnimals = animalEmoji
          .OrderBy(item => Random.Shared.Next())
          .ToList();

        timer = new Timer(100);//when this iterates 10 is one second
        timer.Elapsed += Timer_Elapsed;

        tenthsOfSecondsElapsed = 0;

    }
    private void Timer_Elapsed(object? source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeToDisplay = (tenthsOfSecondsElapsed / 10).ToString() + "." + (tenthsOfSecondsElapsed % 10).ToString() + " seconds";
            randomNumber = Random.Shared.Next();
            Console.WriteLine(randomNumber);
            StateHasChanged();
        });
    }


    Timer timer = new Timer(100);//when this iterates 10 is one second
    int randomNumber = Random.Shared.Next();
    int tenthsOfSecondsElapsed = 0;
    string timeToDisplay = "";


    protected override void OnInitialized()
    {
        SetUpGame();
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private void ButtonClick(string currentAnimal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = currentAnimal;
            lastDescription = animalDescription;
        }
        else if ((lastAnimalFound == currentAnimal)
              && (animalDescription != lastDescription))
        {
            timer.Start();
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them.
            shuffledAnimals = shuffledAnimals
          .Select(a => a.Replace(currentAnimal, string.Empty))
          .ToList();

            matchesFound += 1;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeToDisplay += "Game over :Play Again";
                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that don't match, reset selection.
            lastAnimalFound = string.Empty;
        }
    }

}
